// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.22.0
// source: ruleset.proto

package rulesetpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Ruleset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// github_repo_full_path is the full path to its github repo. eg.
	// bazelbuild/bazel-skylib
	GithubRepo string `protobuf:"bytes,1,opt,name=github_repo,json=githubRepo,proto3" json:"github_repo,omitempty"`
	// maintainers of the ruleset in the form of mailbox format as specified in
	// RFC 5322.
	Maintainers []string `protobuf:"bytes,2,rep,name=maintainers,proto3" json:"maintainers,omitempty"`
	// update_time is the time when this data is updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// license of the project.
	License string `protobuf:"bytes,4,opt,name=license,proto3" json:"license,omitempty"`
	// tags are versions of this ruleset
	Versions []*Version `protobuf:"bytes,5,rep,name=versions,proto3" json:"versions,omitempty"`
}

func (x *Ruleset) Reset() {
	*x = Ruleset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ruleset_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ruleset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ruleset) ProtoMessage() {}

func (x *Ruleset) ProtoReflect() protoreflect.Message {
	mi := &file_ruleset_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ruleset.ProtoReflect.Descriptor instead.
func (*Ruleset) Descriptor() ([]byte, []int) {
	return file_ruleset_proto_rawDescGZIP(), []int{0}
}

func (x *Ruleset) GetGithubRepo() string {
	if x != nil {
		return x.GithubRepo
	}
	return ""
}

func (x *Ruleset) GetMaintainers() []string {
	if x != nil {
		return x.Maintainers
	}
	return nil
}

func (x *Ruleset) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Ruleset) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

func (x *Ruleset) GetVersions() []*Version {
	if x != nil {
		return x.Versions
	}
	return nil
}

// Version denotes a version of a ruleset.
type Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ref is a git reference that could be resolved to a commit object,
	// normally a tag, ie. a semver starting with v. HEAD stands
	Ref string `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	// SHA of the commit being tagged.
	Sha string `protobuf:"bytes,2,opt,name=sha,proto3" json:"sha,omitempty"`
	// description is the content of the README file.
	Readme string `protobuf:"bytes,3,opt,name=readme,proto3" json:"readme,omitempty"`
	// yanked denotes if this version is yanked.
	Yanked bool `protobuf:"varint,5,opt,name=yanked,proto3" json:"yanked,omitempty"`
	// releases made at this version.
	Releases []*Release `protobuf:"bytes,6,rep,name=releases,proto3" json:"releases,omitempty"`
	// module_file is the parsed MODULE.bazel file. If set, this version is a
	// valid bzlmod.
	ModuleFile *ModuleFile `protobuf:"bytes,7,opt,name=module_file,json=moduleFile,proto3" json:"module_file,omitempty"`
}

func (x *Version) Reset() {
	*x = Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ruleset_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_ruleset_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_ruleset_proto_rawDescGZIP(), []int{1}
}

func (x *Version) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *Version) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *Version) GetReadme() string {
	if x != nil {
		return x.Readme
	}
	return ""
}

func (x *Version) GetYanked() bool {
	if x != nil {
		return x.Yanked
	}
	return false
}

func (x *Version) GetReleases() []*Release {
	if x != nil {
		return x.Releases
	}
	return nil
}

func (x *Version) GetModuleFile() *ModuleFile {
	if x != nil {
		return x.ModuleFile
	}
	return nil
}

// Release denotes a release of a ruleset.
type Release struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// title of the release.
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// description of the release.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// prerelease marks if the release is a preprelease.
	Preprelease bool `protobuf:"varint,5,opt,name=preprelease,proto3" json:"preprelease,omitempty"`
	// publish_time denotes the time this release is made public.
	PublishTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=publish_time,json=publishTime,proto3" json:"publish_time,omitempty"`
	// assets of this release.
	Assets []*Release_Asset `protobuf:"bytes,7,rep,name=assets,proto3" json:"assets,omitempty"`
}

func (x *Release) Reset() {
	*x = Release{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ruleset_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Release) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Release) ProtoMessage() {}

func (x *Release) ProtoReflect() protoreflect.Message {
	mi := &file_ruleset_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Release.ProtoReflect.Descriptor instead.
func (*Release) Descriptor() ([]byte, []int) {
	return file_ruleset_proto_rawDescGZIP(), []int{2}
}

func (x *Release) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Release) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Release) GetPreprelease() bool {
	if x != nil {
		return x.Preprelease
	}
	return false
}

func (x *Release) GetPublishTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishTime
	}
	return nil
}

func (x *Release) GetAssets() []*Release_Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

// ModuleFile is the parsed content of MODULE.bazel.
type ModuleFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the module.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// version of the module.
	Version            string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	BazelCompatibility []string `protobuf:"bytes,3,rep,name=bazel_compatibility,json=bazelCompatibility,proto3" json:"bazel_compatibility,omitempty"`
	// compatibility level of the module.
	CompatibilityLevel           int32    `protobuf:"varint,4,opt,name=compatibility_level,json=compatibilityLevel,proto3" json:"compatibility_level,omitempty"`
	ExecutionPlatformsToRegister []string `protobuf:"bytes,5,rep,name=execution_platforms_to_register,json=executionPlatformsToRegister,proto3" json:"execution_platforms_to_register,omitempty"`
	ToolchainsToRegister         []string `protobuf:"bytes,6,rep,name=toolchains_to_register,json=toolchainsToRegister,proto3" json:"toolchains_to_register,omitempty"`
}

func (x *ModuleFile) Reset() {
	*x = ModuleFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ruleset_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleFile) ProtoMessage() {}

func (x *ModuleFile) ProtoReflect() protoreflect.Message {
	mi := &file_ruleset_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleFile.ProtoReflect.Descriptor instead.
func (*ModuleFile) Descriptor() ([]byte, []int) {
	return file_ruleset_proto_rawDescGZIP(), []int{3}
}

func (x *ModuleFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModuleFile) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ModuleFile) GetBazelCompatibility() []string {
	if x != nil {
		return x.BazelCompatibility
	}
	return nil
}

func (x *ModuleFile) GetCompatibilityLevel() int32 {
	if x != nil {
		return x.CompatibilityLevel
	}
	return 0
}

func (x *ModuleFile) GetExecutionPlatformsToRegister() []string {
	if x != nil {
		return x.ExecutionPlatformsToRegister
	}
	return nil
}

func (x *ModuleFile) GetToolchainsToRegister() []string {
	if x != nil {
		return x.ToolchainsToRegister
	}
	return nil
}

// ProjectPopularity contains stats by measuring the user engagement.
type ProjectPopularity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// update_time is the time when this data is generated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// star_count is the number of stars on github as of update_time.
	StarCount int32 `protobuf:"varint,2,opt,name=star_count,json=starCount,proto3" json:"star_count,omitempty"`
	// fork_count is the number of forks on github as of update_time.
	ForkCount int32 `protobuf:"varint,3,opt,name=fork_count,json=forkCount,proto3" json:"fork_count,omitempty"`
	// release_download_count_by_week is the number of release assets being
	// downloaded aggregated by week. The array order is the oldest week to the
	// most recent week (as of update_time).
	ReleaseDownloadCountByWeek []int32 `protobuf:"varint,4,rep,packed,name=release_download_count_by_week,json=releaseDownloadCountByWeek,proto3" json:"release_download_count_by_week,omitempty"`
	// git_clone_count_by_week is the number of repository being cloned aggregated
	// by week. The array order is the oldest week to the most recent week (as of
	// update_time).
	GitCloneCountByWeek []int32 `protobuf:"varint,5,rep,packed,name=git_clone_count_by_week,json=gitCloneCountByWeek,proto3" json:"git_clone_count_by_week,omitempty"`
	// page_view_count_by_week is the number of page views aggregated by week. The
	// array order is the oldest week to the most recent week (as of update_time).
	PageViewCountByWeek []int32 `protobuf:"varint,6,rep,packed,name=page_view_count_by_week,json=pageViewCountByWeek,proto3" json:"page_view_count_by_week,omitempty"`
}

func (x *ProjectPopularity) Reset() {
	*x = ProjectPopularity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ruleset_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectPopularity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectPopularity) ProtoMessage() {}

func (x *ProjectPopularity) ProtoReflect() protoreflect.Message {
	mi := &file_ruleset_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectPopularity.ProtoReflect.Descriptor instead.
func (*ProjectPopularity) Descriptor() ([]byte, []int) {
	return file_ruleset_proto_rawDescGZIP(), []int{4}
}

func (x *ProjectPopularity) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *ProjectPopularity) GetStarCount() int32 {
	if x != nil {
		return x.StarCount
	}
	return 0
}

func (x *ProjectPopularity) GetForkCount() int32 {
	if x != nil {
		return x.ForkCount
	}
	return 0
}

func (x *ProjectPopularity) GetReleaseDownloadCountByWeek() []int32 {
	if x != nil {
		return x.ReleaseDownloadCountByWeek
	}
	return nil
}

func (x *ProjectPopularity) GetGitCloneCountByWeek() []int32 {
	if x != nil {
		return x.GitCloneCountByWeek
	}
	return nil
}

func (x *ProjectPopularity) GetPageViewCountByWeek() []int32 {
	if x != nil {
		return x.PageViewCountByWeek
	}
	return nil
}

type ProjectHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// community_profile_health_percentage is defined as a percentage of how many
	// of expected project documents present. See
	// https://docs.github.com/en/rest/metrics/community#get-community-profile-metrics
	CommunityProfileHealthPercentage int32 `protobuf:"varint,1,opt,name=community_profile_health_percentage,json=communityProfileHealthPercentage,proto3" json:"community_profile_health_percentage,omitempty"`
}

func (x *ProjectHealth) Reset() {
	*x = ProjectHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ruleset_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectHealth) ProtoMessage() {}

func (x *ProjectHealth) ProtoReflect() protoreflect.Message {
	mi := &file_ruleset_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectHealth.ProtoReflect.Descriptor instead.
func (*ProjectHealth) Descriptor() ([]byte, []int) {
	return file_ruleset_proto_rawDescGZIP(), []int{5}
}

func (x *ProjectHealth) GetCommunityProfileHealthPercentage() int32 {
	if x != nil {
		return x.CommunityProfileHealthPercentage
	}
	return 0
}

// ProjectActivity contains stats by measuring the contributor engagement.
type ProjectActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// open_pr_count is the number of open PRs as of update_time.
	OpenPrCount int32 `protobuf:"varint,2,opt,name=open_pr_count,json=openPrCount,proto3" json:"open_pr_count,omitempty"`
	// open_issue_count is the number of open issues as of update_time.
	OpenIssueCount int32 `protobuf:"varint,3,opt,name=open_issue_count,json=openIssueCount,proto3" json:"open_issue_count,omitempty"`
	// commit_count_by_week is the number of commits being submitted aggregated by
	// week. The array order is the oldest week to the most recent week (as of
	// update_time).
	CommitCountByWeek []int32 `protobuf:"varint,4,rep,packed,name=commit_count_by_week,json=commitCountByWeek,proto3" json:"commit_count_by_week,omitempty"`
	// pr_open_count_by_week is the number of pr open events aggregated by
	// week. The array order is the oldest week to the most recent week (as of
	// update_time).
	PrOpenCountByWeek []int32 `protobuf:"varint,5,rep,packed,name=pr_open_count_by_week,json=prOpenCountByWeek,proto3" json:"pr_open_count_by_week,omitempty"`
	// pr_close_count_by_week is the number of pr close (incl. merge) events
	// aggregated by week. The array order is the oldest week to the most recent
	// week (as of update_time).
	PrCloseCountByWeek []int32 `protobuf:"varint,6,rep,packed,name=pr_close_count_by_week,json=prCloseCountByWeek,proto3" json:"pr_close_count_by_week,omitempty"`
	// issue_open_count_by_week is the number of issue open events aggregated by
	// week. The array order is the oldest week to the most recent week (as of
	// update_time).
	IssueOpenCountByWeek []int32 `protobuf:"varint,7,rep,packed,name=issue_open_count_by_week,json=issueOpenCountByWeek,proto3" json:"issue_open_count_by_week,omitempty"`
	// issue_close_count_by_week is the number of issue close events aggregated by
	// week. The array order is the oldest week to the most recent week (as of
	// update_time).
	IssueCloseCountByWeek []int32 `protobuf:"varint,8,rep,packed,name=issue_close_count_by_week,json=issueCloseCountByWeek,proto3" json:"issue_close_count_by_week,omitempty"`
}

func (x *ProjectActivity) Reset() {
	*x = ProjectActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ruleset_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectActivity) ProtoMessage() {}

func (x *ProjectActivity) ProtoReflect() protoreflect.Message {
	mi := &file_ruleset_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectActivity.ProtoReflect.Descriptor instead.
func (*ProjectActivity) Descriptor() ([]byte, []int) {
	return file_ruleset_proto_rawDescGZIP(), []int{6}
}

func (x *ProjectActivity) GetOpenPrCount() int32 {
	if x != nil {
		return x.OpenPrCount
	}
	return 0
}

func (x *ProjectActivity) GetOpenIssueCount() int32 {
	if x != nil {
		return x.OpenIssueCount
	}
	return 0
}

func (x *ProjectActivity) GetCommitCountByWeek() []int32 {
	if x != nil {
		return x.CommitCountByWeek
	}
	return nil
}

func (x *ProjectActivity) GetPrOpenCountByWeek() []int32 {
	if x != nil {
		return x.PrOpenCountByWeek
	}
	return nil
}

func (x *ProjectActivity) GetPrCloseCountByWeek() []int32 {
	if x != nil {
		return x.PrCloseCountByWeek
	}
	return nil
}

func (x *ProjectActivity) GetIssueOpenCountByWeek() []int32 {
	if x != nil {
		return x.IssueOpenCountByWeek
	}
	return nil
}

func (x *ProjectActivity) GetIssueCloseCountByWeek() []int32 {
	if x != nil {
		return x.IssueCloseCountByWeek
	}
	return nil
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ruleset_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_ruleset_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_ruleset_proto_rawDescGZIP(), []int{7}
}

func (x *Metadata) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

type Release_Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the asset. eg. xxx.tar
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// url is the url for dowloading the asset.
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// download_count is the accumulated number of downloads.
	// Output only.
	DownloadCountByWeek int32 `protobuf:"varint,3,opt,name=download_count_by_week,json=downloadCountByWeek,proto3" json:"download_count_by_week,omitempty"`
}

func (x *Release_Asset) Reset() {
	*x = Release_Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ruleset_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Release_Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Release_Asset) ProtoMessage() {}

func (x *Release_Asset) ProtoReflect() protoreflect.Message {
	mi := &file_ruleset_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Release_Asset.ProtoReflect.Descriptor instead.
func (*Release_Asset) Descriptor() ([]byte, []int) {
	return file_ruleset_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Release_Asset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Release_Asset) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Release_Asset) GetDownloadCountByWeek() int32 {
	if x != nil {
		return x.DownloadCountByWeek
	}
	return 0
}

var File_ruleset_proto protoreflect.FileDescriptor

var file_ruleset_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd1, 0x01, 0x0a, 0x07, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x69,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12,
	0x2c, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc1, 0x01,
	0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x68, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x68, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x64, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x64, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x79, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x79, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x12, 0x2c, 0x0a,
	0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0b, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x22, 0xb6, 0x02, 0x0a, 0x07, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x70, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x70,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74,
	0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x1a, 0x62, 0x0a, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x57, 0x65, 0x65, 0x6b, 0x22, 0x99, 0x02, 0x0a, 0x0a, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x62, 0x61, 0x7a, 0x65, 0x6c,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x62, 0x61, 0x7a, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x45, 0x0a, 0x1f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73,
	0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x1c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x34, 0x0a, 0x16, 0x74, 0x6f, 0x6f, 0x6c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x14, 0x74, 0x6f, 0x6f, 0x6c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x54, 0x6f, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x22, 0xbe, 0x02, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x6b,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x6f,
	0x72, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1e, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x62, 0x79, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x1a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x34, 0x0a, 0x17, 0x67,
	0x69, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62,
	0x79, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x13, 0x67, 0x69,
	0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x57, 0x65, 0x65,
	0x6b, 0x12, 0x34, 0x0a, 0x17, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x13, 0x70, 0x61, 0x67, 0x65, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x79, 0x57, 0x65, 0x65, 0x6b, 0x22, 0x5e, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x4d, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0xe8, 0x02, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x77, 0x65, 0x65,
	0x6b, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x30, 0x0a, 0x15, 0x70, 0x72,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x77,
	0x65, 0x65, 0x6b, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x11, 0x70, 0x72, 0x4f, 0x70, 0x65,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x32, 0x0a, 0x16,
	0x70, 0x72, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62,
	0x79, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x12, 0x70, 0x72,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x57, 0x65, 0x65, 0x6b,
	0x12, 0x36, 0x0a, 0x18, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x14, 0x69, 0x73, 0x73, 0x75, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x79, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x38, 0x0a, 0x19, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x79,
	0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x15, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x57, 0x65,
	0x65, 0x6b, 0x22, 0x47, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3b,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x56, 0x5a, 0x54, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x7a, 0x65, 0x6c, 0x2d,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2f, 0x53, 0x49, 0x47, 0x2d, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2d, 0x6b, 0x65, 0x65,
	0x70, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x65,
	0x74, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ruleset_proto_rawDescOnce sync.Once
	file_ruleset_proto_rawDescData = file_ruleset_proto_rawDesc
)

func file_ruleset_proto_rawDescGZIP() []byte {
	file_ruleset_proto_rawDescOnce.Do(func() {
		file_ruleset_proto_rawDescData = protoimpl.X.CompressGZIP(file_ruleset_proto_rawDescData)
	})
	return file_ruleset_proto_rawDescData
}

var file_ruleset_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_ruleset_proto_goTypes = []interface{}{
	(*Ruleset)(nil),               // 0: ruleset.Ruleset
	(*Version)(nil),               // 1: ruleset.Version
	(*Release)(nil),               // 2: ruleset.Release
	(*ModuleFile)(nil),            // 3: ruleset.ModuleFile
	(*ProjectPopularity)(nil),     // 4: ruleset.ProjectPopularity
	(*ProjectHealth)(nil),         // 5: ruleset.ProjectHealth
	(*ProjectActivity)(nil),       // 6: ruleset.ProjectActivity
	(*Metadata)(nil),              // 7: ruleset.Metadata
	(*Release_Asset)(nil),         // 8: ruleset.Release.Asset
	(*timestamppb.Timestamp)(nil), // 9: google.protobuf.Timestamp
}
var file_ruleset_proto_depIdxs = []int32{
	9, // 0: ruleset.Ruleset.update_time:type_name -> google.protobuf.Timestamp
	1, // 1: ruleset.Ruleset.versions:type_name -> ruleset.Version
	2, // 2: ruleset.Version.releases:type_name -> ruleset.Release
	3, // 3: ruleset.Version.module_file:type_name -> ruleset.ModuleFile
	9, // 4: ruleset.Release.publish_time:type_name -> google.protobuf.Timestamp
	8, // 5: ruleset.Release.assets:type_name -> ruleset.Release.Asset
	9, // 6: ruleset.ProjectPopularity.update_time:type_name -> google.protobuf.Timestamp
	9, // 7: ruleset.Metadata.update_time:type_name -> google.protobuf.Timestamp
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_ruleset_proto_init() }
func file_ruleset_proto_init() {
	if File_ruleset_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ruleset_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ruleset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ruleset_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ruleset_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Release); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ruleset_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ruleset_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectPopularity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ruleset_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ruleset_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ruleset_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ruleset_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Release_Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ruleset_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ruleset_proto_goTypes,
		DependencyIndexes: file_ruleset_proto_depIdxs,
		MessageInfos:      file_ruleset_proto_msgTypes,
	}.Build()
	File_ruleset_proto = out.File
	file_ruleset_proto_rawDesc = nil
	file_ruleset_proto_goTypes = nil
	file_ruleset_proto_depIdxs = nil
}
